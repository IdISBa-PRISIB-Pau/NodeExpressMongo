Exercise (Instructions): Express Sessions Part 1
Objectives and Outcomes

In this exercise you will use Express sessions to track authenticated users 
so as to enable authenticated access to server resources. At the end of this 
exercise you will be able to:

    Set up your Express server to use Express sessions to track authenticated users
    Enable clients to access secure resources on the server after authentication.

Installing express-session

    Still in the conFusionServer folder, install express-session and session-file-store 
    Node modules as follows:
    
         npm install express-session@1.15.6 session-file-store@1.2.0 --save
         
    Using express-session

    Then, update app.js as follows to use Express session:
    
    . . .

var session = require('express-session');
var FileStore = require('session-file-store')(session);

. . .

app.use(session({
  name: 'session-id',
  secret: '12345-67890-09876-54321',
  saveUninitialized: false,
  resave: false,
  store: new FileStore()
}));

function auth (req, res, next) {
    console.log(req.session);

    if (!req.session.user) {
        var authHeader = req.headers.authorization;
        if (!authHeader) {
            var err = new Error('You are not authenticated!');
            res.setHeader('WWW-Authenticate', 'Basic');                        
            err.status = 401;
            next(err);
            return;
        }
        var auth = new Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':');
        var user = auth[0];
        var pass = auth[1];
        if (user == 'admin' && pass == 'password') {
            req.session.user = 'admin';
            next(); // authorized
        } else {
            var err = new Error('You are not authenticated!');
            res.setHeader('WWW-Authenticate', 'Basic');
            err.status = 401;
            next(err);
        }
    }
    else {
        if (req.session.user === 'admin') {
            console.log('req.session: ',req.session);
            next();
        }
        else {
            var err = new Error('You are not authenticated!');
            err.status = 401;
            next(err);
        }
    }
}

. . .

    Save the changes, run the server and examine the behavior.
    Do a Git commit with the message "Express Session Part 1".

Conclusions

In this exercise you set up the Express server to use express-session to track authenticated users to provide access to secure resources.
